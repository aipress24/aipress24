#!/usr/bin/env python

# Copyright (c) 2021-2024 - Abilian SAS & TCA
#
# SPDX-License-Identifier: AGPL-3.0-only


import subprocess
from pathlib import Path

from buildstr import Builder

from app.modules.wip.forms import (
    article_form,
    avis_enquete_form,
    commande_form,
    sujet_form,
)

FORMS = [article_form, avis_enquete_form, sujet_form, commande_form]
TARGET_FILE = "src/app/modules/wip/crud/cbvs/_forms.py"

HEADERS = """
#
# Autogenerated. DO NOT EDIT.
#
from wtforms import Form, validators

from wtforms.fields.simple import StringField, TextAreaField
from wtforms.fields.choices import SelectField

from app.flask.lib.wtforms.fields import RichSelectField, DateTimeField, \\
    ImageField, RichTextField
"""


def generate_wtform(form: dict):
    b = Builder(separator="\n")

    model_class_name = form["model_class"].split(".")[-1]
    b << f"class {model_class_name}Form(Form):"

    groups = {}
    for group_name, group in form["group"].items():
        groups[group_name] = group.copy()
        groups[group_name]["fields"] = []

        b << ""
        b << f"    # Group: {group_name}"
        for field_name, field in form["field"].items():
            if field["group"] != group_name:
                continue

            field_code = generate_field(field_name, field)
            b << f"    {field_code}"
            groups[group_name]["fields"].append(field_name)

        b << ""

    b << "    class Meta:"
    b << f"        groups = {repr(groups)}"

    return str(b)


def generate_field(field_name: str, field: dict) -> str:
    b = Builder(separator="")
    b << f"{field_name} = "
    field_type = field.get("type", "string")

    match field_type:
        case "string":
            b << "StringField"
        case "text":
            b << "TextAreaField"
        case "rich-text":
            b << "RichTextField"
        case "datetime":
            b << "DateTimeField"
        case "select":
            b << "SelectField"
        case "rich-select":
            b << "RichSelectField"
        case "image":
            b << "ImageField"
        case _:
            raise ValueError(f"Unknown field type: {field_type}")

    with b(surround=("(", ")"), separator=", ") as b1:
        field_label = field.get("label", field_name)
        args = [repr(field_label)]

        render_kw = {}
        if width := field.get("width", 0):
            render_kw["width"] = width

        if field_type == "rich-select":
            key = field["key"]
            args += [f"key='{key}'"]

        if render_kw:
            args += [f"render_kw={repr(render_kw)}"]

        required = field.get("required", False)
        if required:
            args += ["validators=[validators.InputRequired()]"]

        b1 << args

    return str(b)


def generate_headers() -> str:
    return HEADERS.strip() + "\n\n\n"


def main():
    b = Builder(separator="\n")
    b << generate_headers()
    b << "\n"

    for form in FORMS:
        b << generate_wtform(form)
        b.nl()

    print(str(b))
    Path(TARGET_FILE).write_text(str(b))

    subprocess.run(["black", TARGET_FILE], check=True)
    print(f"Generated: {TARGET_FILE}")


main()
