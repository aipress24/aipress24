"""reformat KYC fields

Revision ID: 529e8a4d26cc
Revises: aefef36a7b1a
Create Date: 2025-09-12 16:01:00.697617

"""

import json
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "529e8a4d26cc"
down_revision = "aefef36a7b1a"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Add new columns (as nullable)
    op.add_column("kyc_profile", sa.Column("info_hobby", sa.JSON(), nullable=True))
    op.execute("UPDATE kyc_profile SET info_hobby = '{}'::jsonb")

    # Define a temporary table to work with old columns
    temp_table = sa.Table(
        "kyc_profile",
        sa.MetaData(),
        sa.Column("id", sa.Integer, primary_key=True),
        sa.Column("info_personnelle", sa.JSON(), nullable=True),
        sa.Column("match_making", sa.JSON(), nullable=True),
        sa.Column("business_wall", sa.JSON(), nullable=True),
        sa.Column("info_hobby", sa.JSON(), nullable=True),
    )

    # New keys to add to the 'business_wall' column
    new_business_wall_keys = {
        "trigger_media_jr_microentrep": False,
        "trigger_media_federation": False,
        "trigger_pr_independant": False,
        "trigger_pr_organisation": False,
        "trigger_expert": False,
        "trigger_startup": False,
        "trigger_transformers_independant": False,
        "trigger_academics_entrepreneur": False,
    }

    # Fetch data and fill
    connection = op.get_bind()
    for row in connection.execute(
        sa.select(
            temp_table.c.id,
            temp_table.c.info_personnelle,
            temp_table.c.match_making,
            temp_table.c.business_wall,
        )
    ):
        info_hobby_data = {
            "hobbies": row.match_making.get("hobbies", ""),
            "macaron_hebergement": row.info_personnelle.get(
                "macaron_hebergement", False
            ),
            "macaron_repas": row.info_personnelle.get("macaron_repas", False),
            "macaron_verre": row.info_personnelle.get("macaron_verre", False),
        }

        merged_business_wall = row.business_wall
        organization_value = merged_business_wall.pop("trigger_organization", False)
        merged_business_wall["trigger_organisation"] = organization_value
        merged_business_wall.update(new_business_wall_keys)

        # Update the row with the new data
        connection.execute(
            sa.text(
                "UPDATE kyc_profile SET info_hobby = :hobby_data, business_wall = :wall_data WHERE id = :id"
            ),
            {
                "hobby_data": json.dumps(info_hobby_data),
                "wall_data": json.dumps(merged_business_wall),
                "id": row.id,
            },
        )

        merged_info_personnelle = row.info_personnelle
        merged_info_personnelle["metier_principal"] = ""  # new field
        for key in [
            "metier",
            "metier_detail",
            "competences",
            "langues",
            "formations",
            "experiences",
        ]:
            merged_info_personnelle[key] = row.match_making.get(key, "")

        # Remove migrated data
        for key in ["macaron_hebergement", "macaron_repas", "macaron_verre"]:
            if key in row.info_personnelle:
                del row.info_personnelle[key]

        for key in [
            "metier",
            "metier_detail",
            "competences",
            "langues",
            "formations",
            "experiences",
            "hobbies",
        ]:
            if key in row.match_making:
                del row.match_making[key]

        connection.execute(
            sa.text(
                "UPDATE kyc_profile SET info_personnelle = :info_perso, match_making = :match_making WHERE id = :id"
            ),
            {
                "info_perso": json.dumps(row.info_personnelle),
                "match_making": json.dumps(row.match_making),
                "id": row.id,
            },
        )

    # Set the new column to not nullable
    op.alter_column("kyc_profile", "info_hobby", nullable=False)


def downgrade():
    with op.batch_alter_table("kyc_profile", schema=None) as batch_op:
        batch_op.drop_column("info_hobby")
