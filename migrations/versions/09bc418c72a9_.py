"""empty message

Revision ID: 09bc418c72a9
Revises:
Create Date: 2025-01-23 22:09:35.898781

"""

import sqlalchemy_utils
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "09bc418c72a9"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "adm_promotion",
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("body", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("slug"),
    )
    op.create_table(
        "aut_role",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(length=80), nullable=False),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "blb_blob",
        sa.Column("uuid", sa.Uuid(), nullable=False),
        sa.Column("s3_id", sa.String(), nullable=False),
        sa.Column("sha256", sa.String(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("filename", sa.String(), nullable=False),
        sa.Column("mimetype", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "timestamp", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "country",
        sa.Column("iso3", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("seq", sa.Integer(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("country", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_country_iso3"), ["iso3"], unique=False)

    op.create_table(
        "crp_organisation",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("siren", sa.String(), nullable=True),
        sa.Column("tva", sa.String(), nullable=True),
        sa.Column("nom_groupe", sa.String(), nullable=False),
        sa.Column("tel_standard", sa.String(), nullable=False),
        sa.Column("taille_orga", sa.String(), nullable=False),
        sa.Column("leader_name", sa.String(), nullable=False),
        sa.Column("leader_coords", sa.String(), nullable=False),
        sa.Column("payer_name", sa.String(), nullable=False),
        sa.Column("payer_coords", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("metiers", sa.JSON(), nullable=False),
        sa.Column("metiers_detail", sa.JSON(), nullable=False),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "type",
            sa.Enum(
                "AUTO", "MEDIA", "AGENCY", "COM", "OTHER", name="organisationtypeenum"
            ),
            nullable=False,
        ),
        sa.Column(
            "bw_type",
            sa.Enum(
                "AGENCY",
                "MEDIA",
                "CORPORATE",
                "PRESSUNION",
                "COM",
                "ORGANISATION",
                "TRANSFORMER",
                "ACADEMICS",
                name="bwtypeenum",
            ),
            nullable=True,
        ),
        sa.Column("creator_profile_code", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("stripe_product_id", sa.String(), nullable=False),
        sa.Column("stripe_subscription_id", sa.String(), nullable=False),
        sa.Column(
            "stripe_subs_creation_date",
            sqlalchemy_utils.types.arrow.ArrowType(),
            nullable=False,
        ),
        sa.Column(
            "stripe_subs_current_period_start",
            sqlalchemy_utils.types.arrow.ArrowType(),
            nullable=False,
        ),
        sa.Column(
            "validity_date", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("karma", sa.Integer(), nullable=False),
        sa.Column("site_url", sa.String(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=False),
        sa.Column("cover_image_url", sa.String(), nullable=False),
        sa.Column("logo_id", sa.String(), nullable=False),
        sa.Column("cover_image_id", sa.String(), nullable=False),
        sa.Column("screenshot_id", sa.String(), nullable=False),
        sa.Column("pays_zip_ville", sa.String(), nullable=False),
        sa.Column("pays_zip_ville_detail", sa.String(), nullable=False),
        sa.Column("agree_arcom", sa.Boolean(), nullable=False),
        sa.Column("agree_cppap", sa.Boolean(), nullable=False),
        sa.Column("number_cppap", sa.String(), nullable=False),
        sa.Column("membre_saphir", sa.Boolean(), nullable=False),
        sa.Column("membre_sapi", sa.Boolean(), nullable=False),
        sa.Column("membre_satev", sa.Boolean(), nullable=False),
        sa.Column("secteurs_activite_medias", sa.JSON(), nullable=False),
        sa.Column("secteurs_activite_medias_detail", sa.JSON(), nullable=False),
        sa.Column("secteurs_activite_rp", sa.JSON(), nullable=False),
        sa.Column("secteurs_activite_rp_detail", sa.JSON(), nullable=False),
        sa.Column("secteurs_activite", sa.JSON(), nullable=False),
        sa.Column("secteurs_activite_detail", sa.JSON(), nullable=False),
        sa.Column("transformation_majeure", sa.JSON(), nullable=False),
        sa.Column("transformation_majeure_detail", sa.JSON(), nullable=False),
        sa.Column("type_organisation", sa.JSON(), nullable=False),
        sa.Column("type_organisation_detail", sa.JSON(), nullable=False),
        sa.Column("type_entreprise_media", sa.JSON(), nullable=False),
        sa.Column("type_presse_et_media", sa.JSON(), nullable=False),
        sa.Column("type_agence_rp", sa.JSON(), nullable=False),
        sa.Column("main_events", sa.String(), nullable=False),
        sa.Column("number_customers", sa.Integer(), nullable=False),
        sa.Column("main_customers", sa.String(), nullable=False),
        sa.Column("main_prizes", sa.String(), nullable=False),
        sa.Column("positionnement_editorial", sa.String(), nullable=False),
        sa.Column("audience_cible", sa.String(), nullable=False),
        sa.Column("tirage", sa.String(), nullable=False),
        sa.Column("frequence_publication", sa.String(), nullable=False),
        sa.Column("metiers_presse", sa.JSON(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("departement", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("dept_code", sa.String(), nullable=False),
        sa.Column("region_code", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("geo_lat", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.Column("geo_lng", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("crp_organisation", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_crp_organisation_type"), ["type"], unique=False
        )

    op.create_table(
        "kyc_tmp_blob",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("uuid", sa.String(), nullable=False),
        sa.Column("content", sa.LargeBinary(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "org_invitations",
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("organisation_id", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("org_invitations", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_org_invitations_email"), ["email"], unique=False
        )

    op.create_table(
        "ses_session",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("session_id", sa.String(), nullable=True),
        sa.Column("_data", sa.String(), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ses_session", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_ses_session_session_id"), ["session_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ses_session_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "sta_record",
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("duration", sa.String(), nullable=False),
        sa.Column("key", sa.String(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("date", "duration", "key", "id"),
    )
    op.create_table(
        "tax_taxonomy",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("seq", sa.Integer(), nullable=False),
        sa.Column("taxonomy_name", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("tax_taxonomy", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_tax_taxonomy_value"), ["value"], unique=False
        )

    op.create_table(
        "web_page",
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("status", sa.Integer(), nullable=False),
        sa.Column("content_type", sa.String(), nullable=False),
        sa.Column("lang", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("url"),
    )
    op.create_table(
        "zip_code",
        sa.Column("iso3", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("zip_code", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_zip_code_value"), ["value"], unique=False)

    op.create_table(
        "aut_user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("email_safe_copy", sa.String(), nullable=True),
        sa.Column("email_secours", sa.String(), nullable=True),
        sa.Column("password", sa.String(), nullable=True),
        sa.Column("is_clone", sa.Boolean(), nullable=False),
        sa.Column("cloned_user_id", sa.Integer(), nullable=False),
        sa.Column(
            "submited_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "validated_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("validation_status", sa.String(), nullable=False),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("last_login_at", sa.DateTime(), nullable=True),
        sa.Column("current_login_at", sa.DateTime(), nullable=True),
        sa.Column("last_login_ip", sa.String(), nullable=True),
        sa.Column("current_login_ip", sa.String(), nullable=False),
        sa.Column("login_count", sa.Integer(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.Column("fs_uniquifier", sa.String(length=64), nullable=False),
        sa.Column("gcu_acceptation", sa.Boolean(), nullable=False),
        sa.Column(
            "gcu_acceptation_date",
            sa.DateTime(),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("gender", sa.String(length=1), nullable=False),
        sa.Column("first_name", sa.String(length=64), nullable=False),
        sa.Column("last_name", sa.String(length=64), nullable=False),
        sa.Column("photo", sa.LargeBinary(), nullable=True),
        sa.Column("photo_filename", sa.String(), nullable=False),
        sa.Column("photo_carte_presse", sa.LargeBinary(), nullable=True),
        sa.Column("photo_carte_presse_filename", sa.String(), nullable=False),
        sa.Column("tel_mobile", sa.String(), nullable=False),
        sa.Column(
            "tel_mobile_validated_at",
            sqlalchemy_utils.types.arrow.ArrowType(),
            nullable=True,
        ),
        sa.Column("organisation_id", sa.BigInteger(), nullable=True),
        sa.Column("profile_image_url", sa.String(), nullable=False),
        sa.Column("cover_image_url", sa.String(), nullable=False),
        sa.Column("status", sa.String(), nullable=False),
        sa.Column("karma", sa.Float(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("departement", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("dept_code", sa.String(), nullable=False),
        sa.Column("region_code", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("geo_lat", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.Column("geo_lng", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.ForeignKeyConstraint(
            ["organisation_id"], ["crp_organisation.id"], name="fk_aut_user_org_id"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("fs_uniquifier"),
    )
    op.create_table(
        "web_screenshot",
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.Column("screenshot_id", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["url"],
            ["web_page.url"],
        ),
        sa.PrimaryKeyConstraint("url"),
    )
    op.create_table(
        "aut_roles_users",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("role_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"], ["aut_role.id"], name="fk_aut_roles_users_role_id"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["aut_user.id"], name="fk_aut_roles_users_user_id"
        ),
    )
    op.create_table(
        "cnt_base",
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("summary", sa.String(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column(
            "start_date", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("end_date", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True),
        sa.Column(
            "start_time", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("end_time", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("category", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=False),
        sa.Column("cover_image_url", sa.String(), nullable=False),
        sa.Column("view_count", sa.Integer(), nullable=False),
        sa.Column("like_count", sa.Integer(), nullable=False),
        sa.Column("comment_count", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT",
                "PRIVATE",
                "PENDING",
                "PUBLIC",
                "REJECTED",
                "EXPIRED",
                "ARCHIVED",
                "DELETED",
                name="publicationstatus",
            ),
            nullable=True,
        ),
        sa.Column(
            "published_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "expired_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("publisher_id", sa.BigInteger(), nullable=True),
        sa.Column("_fts", sa.UnicodeText(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("departement", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("dept_code", sa.String(), nullable=False),
        sa.Column("region_code", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("geo_lat", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.Column("geo_lng", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["crp_organisation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "inv_invoice",
        sa.Column("invoice_number", sa.String(), nullable=False),
        sa.Column(
            "invoice_date", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("total", sa.Integer(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "timestamp", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "job_cv",
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("rome_code", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "job_post",
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("slug", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("rome_code", sa.String(), nullable=False),
        sa.Column("location", sa.String(), nullable=False),
        sa.Column("karma", sa.Integer(), nullable=False),
        sa.Column("employer_id", sa.BigInteger(), nullable=False),
        sa.Column("pe_id", sa.String(), nullable=False),
        sa.Column("_data", sa.JSON(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["employer_id"],
            ["crp_organisation.id"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("job_post", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_job_post_pe_id"), ["pe_id"], unique=False)

    op.create_table(
        "kyc_profile",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("profile_id", sa.String(), nullable=False),
        sa.Column("profile_code", sa.String(), nullable=False),
        sa.Column("profile_label", sa.String(), nullable=False),
        sa.Column("profile_community", sa.String(), nullable=False),
        sa.Column("contact_type", sa.String(), nullable=False),
        sa.Column("display_level", sa.Integer(), nullable=False),
        sa.Column("presentation", sa.String(), nullable=False),
        sa.Column("show_contact_details", sa.JSON(), nullable=False),
        sa.Column("info_personnelle", sa.JSON(), nullable=False),
        sa.Column("info_professionnelle", sa.JSON(), nullable=False),
        sa.Column("match_making", sa.JSON(), nullable=False),
        sa.Column("business_wall", sa.JSON(), nullable=False),
        sa.Column("date_update", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["aut_user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "mkp_content",
        sa.Column("type", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT",
                "PRIVATE",
                "PENDING",
                "PUBLIC",
                "REJECTED",
                "EXPIRED",
                "ARCHIVED",
                "DELETED",
                name="publicationstatus",
            ),
            nullable=False,
        ),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "not_notifications",
        sa.Column("receiver_id", sa.Integer(), nullable=False),
        sa.Column("message", sa.String(), nullable=False),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("is_read", sa.Boolean(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "timestamp", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.ForeignKeyConstraint(["receiver_id"], ["aut_user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nrm_article",
        sa.Column("chapo", sa.String(), nullable=False),
        sa.Column("copyright", sa.String(), nullable=False),
        sa.Column(
            "date_parution_prevue",
            sqlalchemy_utils.types.arrow.ArrowType(),
            nullable=False,
        ),
        sa.Column(
            "date_publication_aip24",
            sqlalchemy_utils.types.arrow.ArrowType(),
            nullable=True,
        ),
        sa.Column(
            "date_paiement", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "status",
            sa.Enum("DRAFT", "PUBLIC", "ARCHIVED", name="articlestatus"),
            nullable=False,
        ),
        sa.Column(
            "published_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "expired_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("publisher_id", sa.BigInteger(), nullable=True),
        sa.Column("media_id", sa.BigInteger(), nullable=False),
        sa.Column("commanditaire_id", sa.BigInteger(), nullable=False),
        sa.Column("titre", sa.String(), nullable=False),
        sa.Column("brief", sa.String(), nullable=False),
        sa.Column("numero_edition", sa.String(), nullable=False),
        sa.Column("contenu", sa.String(), nullable=False),
        sa.Column("type_contenu", sa.String(), nullable=False),
        sa.Column("taille_contenu", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("topic", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("geo_localisation", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["commanditaire_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["crp_organisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["crp_organisation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nrm_avis_enquete",
        sa.Column(
            "date_debut_enquete",
            sqlalchemy_utils.types.arrow.ArrowType(),
            nullable=False,
        ),
        sa.Column(
            "date_fin_enquete", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "date_bouclage", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "date_parution_prevue",
            sqlalchemy_utils.types.arrow.ArrowType(),
            nullable=False,
        ),
        sa.Column(
            "type_avis",
            sa.Enum(
                "AVIS_D_ENQUETE", "APPEL_A_TEMOIN", "APPEL_A_EXPERT", name="typeavis"
            ),
            nullable=False,
        ),
        sa.Column("media_id", sa.BigInteger(), nullable=False),
        sa.Column("commanditaire_id", sa.BigInteger(), nullable=False),
        sa.Column("titre", sa.String(), nullable=False),
        sa.Column("brief", sa.String(), nullable=False),
        sa.Column("numero_edition", sa.String(), nullable=False),
        sa.Column("contenu", sa.String(), nullable=False),
        sa.Column("type_contenu", sa.String(), nullable=False),
        sa.Column("taille_contenu", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("topic", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("geo_localisation", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("ciblage_secteur_detailles", sa.String(), nullable=False),
        sa.Column("ciblage_directions_expertise", sa.String(), nullable=True),
        sa.Column("ciblage_types_organisation", sa.String(), nullable=True),
        sa.Column("ciblage_tailles_organisation", sa.String(), nullable=True),
        sa.Column("ciblage_geolocation", sa.String(), nullable=True),
        sa.Column("statut", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["commanditaire_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["crp_organisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nrm_commande",
        sa.Column("date_limite_validite", sa.DateTime(), nullable=False),
        sa.Column("date_bouclage", sa.DateTime(), nullable=False),
        sa.Column("date_parution_prevue", sa.DateTime(), nullable=False),
        sa.Column("date_paiement", sa.DateTime(), nullable=False),
        sa.Column("media_id", sa.BigInteger(), nullable=False),
        sa.Column("commanditaire_id", sa.BigInteger(), nullable=False),
        sa.Column("titre", sa.String(), nullable=False),
        sa.Column("brief", sa.String(), nullable=False),
        sa.Column("numero_edition", sa.String(), nullable=False),
        sa.Column("contenu", sa.String(), nullable=False),
        sa.Column("type_contenu", sa.String(), nullable=False),
        sa.Column("taille_contenu", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("topic", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("geo_localisation", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("ciblage_secteur_detailles", sa.String(), nullable=False),
        sa.Column("ciblage_directions_expertise", sa.String(), nullable=True),
        sa.Column("ciblage_types_organisation", sa.String(), nullable=True),
        sa.Column("ciblage_tailles_organisation", sa.String(), nullable=True),
        sa.Column("ciblage_geolocation", sa.String(), nullable=True),
        sa.Column("statut", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["commanditaire_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["crp_organisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nrm_justif_publication",
        sa.Column("date_parution_prevue", sa.DateTime(), nullable=False),
        sa.Column("date_publication_aip24", sa.DateTime(), nullable=False),
        sa.Column("media_id", sa.BigInteger(), nullable=False),
        sa.Column("commanditaire_id", sa.BigInteger(), nullable=False),
        sa.Column("titre", sa.String(), nullable=False),
        sa.Column("brief", sa.String(), nullable=False),
        sa.Column("numero_edition", sa.String(), nullable=False),
        sa.Column("contenu", sa.String(), nullable=False),
        sa.Column("type_contenu", sa.String(), nullable=False),
        sa.Column("taille_contenu", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("topic", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("geo_localisation", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("statut", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["commanditaire_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["crp_organisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nrm_sujet",
        sa.Column("date_limite_validite", sa.DateTime(), nullable=False),
        sa.Column("date_parution_prevue", sa.DateTime(), nullable=False),
        sa.Column("media_id", sa.BigInteger(), nullable=False),
        sa.Column("commanditaire_id", sa.BigInteger(), nullable=False),
        sa.Column("titre", sa.String(), nullable=False),
        sa.Column("brief", sa.String(), nullable=False),
        sa.Column("numero_edition", sa.String(), nullable=False),
        sa.Column("contenu", sa.String(), nullable=False),
        sa.Column("type_contenu", sa.String(), nullable=False),
        sa.Column("taille_contenu", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("topic", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("geo_localisation", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("ciblage_secteur_detailles", sa.String(), nullable=False),
        sa.Column("ciblage_directions_expertise", sa.String(), nullable=True),
        sa.Column("ciblage_types_organisation", sa.String(), nullable=True),
        sa.Column("ciblage_tailles_organisation", sa.String(), nullable=True),
        sa.Column("ciblage_geolocation", sa.String(), nullable=True),
        sa.Column("statut", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["commanditaire_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["media_id"],
            ["crp_organisation.id"],
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "rep_record",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("details", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id", "date"),
    )
    op.create_table(
        "soc_comment",
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("object_id", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("soc_comment", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_soc_comment_object_id"), ["object_id"], unique=False
        )

    op.create_table(
        "soc_following_orgs",
        sa.Column("follower_id", sa.Integer(), nullable=True),
        sa.Column("followee_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["followee_id"],
            ["crp_organisation.id"],
            onupdate="CASCADE",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["follower_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.UniqueConstraint("follower_id", "followee_id"),
    )
    op.create_table(
        "soc_following_users",
        sa.Column("follower_id", sa.Integer(), nullable=True),
        sa.Column("followee_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["followee_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["follower_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.UniqueConstraint("follower_id", "followee_id"),
    )
    op.create_table(
        "soc_group",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("privacy", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("logo_url", sa.String(), nullable=False),
        sa.Column("cover_image_url", sa.String(), nullable=False),
        sa.Column("num_members", sa.Integer(), nullable=False),
        sa.Column("num_posts", sa.Integer(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("departement", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("dept_code", sa.String(), nullable=False),
        sa.Column("region_code", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("geo_lat", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.Column("geo_lng", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("soc_group", schema=None) as batch_op:
        batch_op.create_index(batch_op.f("ix_soc_group_name"), ["name"], unique=False)

    op.create_table(
        "soc_post",
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("view_count", sa.Integer(), nullable=False),
        sa.Column("like_count", sa.Integer(), nullable=False),
        sa.Column("comment_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "soc_report",
        sa.Column("object_id", sa.String(), nullable=False),
        sa.Column("reason", sa.String(), nullable=False),
        sa.Column("comment", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("soc_report", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_soc_report_object_id"), ["object_id"], unique=False
        )

    op.create_table(
        "sta_view_event",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("content_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "timestamp", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "str_activity",
        sa.Column(
            "type",
            sa.Enum(
                "Follow",
                "Unfollow",
                "Join",
                "Leave",
                "Like",
                "Dislike",
                name="activitytype",
            ),
            nullable=False,
        ),
        sa.Column("actor_id", sa.BigInteger(), nullable=False),
        sa.Column("actor_url", sa.String(), nullable=False),
        sa.Column("actor_name", sa.String(), nullable=False),
        sa.Column("object_id", sa.BigInteger(), nullable=True),
        sa.Column("object_type", sa.String(), nullable=True),
        sa.Column("object_url", sa.String(), nullable=True),
        sa.Column("object_name", sa.String(), nullable=True),
        sa.Column("target_id", sa.BigInteger(), nullable=True),
        sa.Column("target_type", sa.String(), nullable=True),
        sa.Column("target_url", sa.String(), nullable=True),
        sa.Column("target_name", sa.String(), nullable=True),
        sa.Column("message", sa.String(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "timestamp", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["actor_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "wir_article",
        sa.Column("newsroom_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "publisher_type",
            sa.Enum("AGENCY", "MEDIA", name="publishertype"),
            nullable=False,
        ),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("summary", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("DRAFT", "PUBLIC", "ARCHIVED", name="poststatus"),
            nullable=False,
        ),
        sa.Column(
            "published_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "last_updated_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "expires_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("publisher_id", sa.BigInteger(), nullable=True),
        sa.Column("image_id", sa.BigInteger(), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("topic", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("geo_localisation", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("view_count", sa.Integer(), nullable=False),
        sa.Column("like_count", sa.Integer(), nullable=False),
        sa.Column("comment_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["crp_organisation.id"],
        ),
        sa.PrimaryKeyConstraint("newsroom_id", "id"),
    )
    op.create_table(
        "wir_press_release",
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("summary", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("DRAFT", "PUBLIC", "ARCHIVED", name="poststatus"),
            nullable=False,
        ),
        sa.Column(
            "published_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "last_updated_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "expires_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("publisher_id", sa.BigInteger(), nullable=True),
        sa.Column("image_id", sa.BigInteger(), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("genre", sa.String(), nullable=False),
        sa.Column("section", sa.String(), nullable=False),
        sa.Column("topic", sa.String(), nullable=False),
        sa.Column("sector", sa.String(), nullable=False),
        sa.Column("geo_localisation", sa.String(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column("view_count", sa.Integer(), nullable=False),
        sa.Column("like_count", sa.Integer(), nullable=False),
        sa.Column("comment_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["crp_organisation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "com_press_release",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("about", sa.String(), nullable=False),
        sa.Column(
            "release_datetime", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "embargo_datetime", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column("image_url", sa.String(), nullable=False),
        sa.Column("sector", sa.UnicodeText(), nullable=False),
        sa.Column("section", sa.UnicodeText(), nullable=False),
        sa.Column("genre", sa.UnicodeText(), nullable=False),
        sa.Column("language", sa.Unicode(length=3), nullable=False),
        sa.Column("topic", sa.UnicodeText(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT",
                "PRIVATE",
                "PENDING",
                "PUBLIC",
                "REJECTED",
                "EXPIRED",
                "ARCHIVED",
                "DELETED",
                name="publicationstatus",
            ),
            nullable=True,
        ),
        sa.Column(
            "published_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "expired_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("publisher_id", sa.BigInteger(), nullable=True),
        sa.Column("_fts", sa.UnicodeText(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("departement", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("dept_code", sa.String(), nullable=False),
        sa.Column("region_code", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("geo_lat", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.Column("geo_lng", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["cnt_base.id"],
        ),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["crp_organisation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "edt_editorial",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("info_source", sa.String(), nullable=False),
        sa.Column("view_count", sa.Integer(), nullable=False),
        sa.Column("like_count", sa.Integer(), nullable=False),
        sa.Column("comment_count", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "DRAFT",
                "PRIVATE",
                "PENDING",
                "PUBLIC",
                "REJECTED",
                "EXPIRED",
                "ARCHIVED",
                "DELETED",
                name="publicationstatus",
            ),
            nullable=True,
        ),
        sa.Column(
            "published_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "expired_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("publisher_id", sa.BigInteger(), nullable=True),
        sa.Column("sector", sa.UnicodeText(), nullable=False),
        sa.Column("section", sa.UnicodeText(), nullable=False),
        sa.Column("genre", sa.UnicodeText(), nullable=False),
        sa.Column("language", sa.Unicode(length=3), nullable=False),
        sa.Column("topic", sa.UnicodeText(), nullable=False),
        sa.Column("copyright_holder", sa.UnicodeText(), nullable=True),
        sa.Column("copyright_notice", sa.UnicodeText(), nullable=True),
        sa.Column("_fts", sa.UnicodeText(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("city", sa.String(), nullable=False),
        sa.Column("region", sa.String(), nullable=False),
        sa.Column("departement", sa.String(), nullable=False),
        sa.Column("country", sa.String(), nullable=False),
        sa.Column("dept_code", sa.String(), nullable=False),
        sa.Column("region_code", sa.String(), nullable=False),
        sa.Column("zip_code", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("geo_lat", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.Column("geo_lng", sa.DECIMAL(precision=11, scale=7), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["cnt_base.id"],
        ),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["crp_organisation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "evt_contest_event",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["cnt_base.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "evt_culture_event",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["cnt_base.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "evt_participation",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("event_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["event_id"], ["cnt_base.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.UniqueConstraint("user_id", "event_id"),
    )
    op.create_table(
        "evt_press_event",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["cnt_base.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "evt_public_event",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["cnt_base.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "evt_training_event",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["cnt_base.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "inv_line",
        sa.Column("invoice_id", sa.BigInteger(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("unit_price", sa.Integer(), nullable=False),
        sa.Column("total", sa.Integer(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["invoice_id"],
            ["inv_invoice.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "mkp_editorial_product",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("title", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("image_url", sa.String(), nullable=False),
        sa.Column("product_type", sa.String(), nullable=False),
        sa.Column("price", sa.Integer(), nullable=False),
        sa.Column("sector", sa.UnicodeText(), nullable=False),
        sa.Column("section", sa.UnicodeText(), nullable=False),
        sa.Column("genre", sa.UnicodeText(), nullable=False),
        sa.Column("language", sa.Unicode(length=3), nullable=False),
        sa.Column("topic", sa.UnicodeText(), nullable=False),
        sa.Column(
            "published_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "expired_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("publisher_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["id"],
            ["mkp_content.id"],
        ),
        sa.ForeignKeyConstraint(
            ["publisher_id"],
            ["crp_organisation.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nrm_contact_avis_enquete",
        sa.Column("avis_enquete_id", sa.BigInteger(), nullable=False),
        sa.Column("journaliste_id", sa.Integer(), nullable=False),
        sa.Column("expert_id", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("EN_ATTENTE", "ACCEPTE", "REFUSE", name="statutavis"),
            nullable=False,
        ),
        sa.Column("date_reponse", sa.DateTime(), nullable=True),
        sa.Column("date_rdv", sa.DateTime(), nullable=True),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["avis_enquete_id"],
            ["nrm_avis_enquete.id"],
        ),
        sa.ForeignKeyConstraint(
            ["expert_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["journaliste_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "nrm_image",
        sa.Column("blob_id", sa.String(), nullable=False),
        sa.Column("article_id", sa.BigInteger(), nullable=False),
        sa.Column("caption", sa.String(), nullable=False),
        sa.Column("copyright", sa.String(), nullable=False),
        sa.Column("position", sa.Integer(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column(
            "created_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column(
            "modified_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column(
            "deleted_at", sqlalchemy_utils.types.arrow.ArrowType(), nullable=True
        ),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["article_id"], ["nrm_article.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "soc_group_exclusions",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("group_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"], ["soc_group.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.UniqueConstraint("user_id", "group_id"),
    )
    op.create_table(
        "soc_group_members",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("group_id", sa.BigInteger(), nullable=True),
        sa.Column("role", sa.UnicodeText(), nullable=False),
        sa.ForeignKeyConstraint(
            ["group_id"], ["soc_group.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.UniqueConstraint("user_id", "group_id"),
    )
    op.create_table(
        "soc_likes",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("content_id", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["content_id"], ["cnt_base.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["aut_user.id"], onupdate="CASCADE", ondelete="CASCADE"
        ),
        sa.UniqueConstraint("user_id", "content_id"),
    )
    op.create_table(
        "tag_application",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("label", sa.String(), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("object_id", sa.BigInteger(), nullable=False),
        sa.Column(
            "timestamp", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(["object_id"], ["cnt_base.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["aut_user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "edt_multimedia",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("format", sa.String(), nullable=False),
        sa.Column("description", sa.String(), nullable=False),
        sa.Column("blob", sa.LargeBinary(), nullable=True),
        sa.Column("file_size", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["edt_editorial.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "edt_text",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["edt_editorial.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "mkp_purchase",
        sa.Column("product_id", sa.BigInteger(), nullable=False),
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column(
            "timestamp", sqlalchemy_utils.types.arrow.ArrowType(), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["aut_user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["product_id"],
            ["mkp_editorial_product.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "edt_article",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("subheader", sa.String(), nullable=False),
        sa.Column("image_id", sa.String(), nullable=False),
        sa.Column("image_caption", sa.String(), nullable=False),
        sa.Column("image_copyright", sa.String(), nullable=False),
        sa.Column("image_url", sa.String(), nullable=False),
        sa.Column("subject", sa.String(), nullable=False),
        sa.Column("copyright", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["edt_text.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "edt_visual",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("height", sa.Integer(), nullable=False),
        sa.Column("width", sa.Integer(), nullable=False),
        sa.Column("resolution", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["edt_multimedia.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "edt_image",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("subtype", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["id"],
            ["edt_visual.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("edt_image")
    op.drop_table("edt_visual")
    op.drop_table("edt_article")
    op.drop_table("mkp_purchase")
    op.drop_table("edt_text")
    op.drop_table("edt_multimedia")
    op.drop_table("tag_application")
    op.drop_table("soc_likes")
    op.drop_table("soc_group_members")
    op.drop_table("soc_group_exclusions")
    op.drop_table("nrm_image")
    op.drop_table("nrm_contact_avis_enquete")
    op.drop_table("mkp_editorial_product")
    op.drop_table("inv_line")
    op.drop_table("evt_training_event")
    op.drop_table("evt_public_event")
    op.drop_table("evt_press_event")
    op.drop_table("evt_participation")
    op.drop_table("evt_culture_event")
    op.drop_table("evt_contest_event")
    op.drop_table("edt_editorial")
    op.drop_table("com_press_release")
    op.drop_table("wir_press_release")
    op.drop_table("wir_article")
    op.drop_table("str_activity")
    op.drop_table("sta_view_event")
    with op.batch_alter_table("soc_report", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_soc_report_object_id"))

    op.drop_table("soc_report")
    op.drop_table("soc_post")
    with op.batch_alter_table("soc_group", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_soc_group_name"))

    op.drop_table("soc_group")
    op.drop_table("soc_following_users")
    op.drop_table("soc_following_orgs")
    with op.batch_alter_table("soc_comment", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_soc_comment_object_id"))

    op.drop_table("soc_comment")
    op.drop_table("rep_record")
    op.drop_table("nrm_sujet")
    op.drop_table("nrm_justif_publication")
    op.drop_table("nrm_commande")
    op.drop_table("nrm_avis_enquete")
    op.drop_table("nrm_article")
    op.drop_table("not_notifications")
    op.drop_table("mkp_content")
    op.drop_table("kyc_profile")
    with op.batch_alter_table("job_post", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_job_post_pe_id"))

    op.drop_table("job_post")
    op.drop_table("job_cv")
    op.drop_table("inv_invoice")
    op.drop_table("cnt_base")
    op.drop_table("aut_roles_users")
    op.drop_table("web_screenshot")
    op.drop_table("aut_user")
    with op.batch_alter_table("zip_code", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_zip_code_value"))

    op.drop_table("zip_code")
    op.drop_table("web_page")
    with op.batch_alter_table("tax_taxonomy", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_tax_taxonomy_value"))

    op.drop_table("tax_taxonomy")
    op.drop_table("sta_record")
    with op.batch_alter_table("ses_session", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ses_session_user_id"))
        batch_op.drop_index(batch_op.f("ix_ses_session_session_id"))

    op.drop_table("ses_session")
    with op.batch_alter_table("org_invitations", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_org_invitations_email"))

    op.drop_table("org_invitations")
    op.drop_table("kyc_tmp_blob")
    with op.batch_alter_table("crp_organisation", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_crp_organisation_type"))

    op.drop_table("crp_organisation")
    with op.batch_alter_table("country", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_country_iso3"))

    op.drop_table("country")
    op.drop_table("blb_blob")
    op.drop_table("aut_role")
    op.drop_table("adm_promotion")
    # ### end Alembic commands ###
