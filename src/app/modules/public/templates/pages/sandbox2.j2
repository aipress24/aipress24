<template
    x-component:hui="menu"
    x-modelable="value"
    x-data="{
    value: null,
    get disabled() {return $prop('disabled')}
}"
>
  <slot></slot>

  <script>
    const _ = $vui._;
    return {
      _elActive: null,
      _isOpen: false,
      open() {
        this._isOpen = true;
        let elMenuItems = this.$findOne(":menu-items");
        $vui.focus(elMenuItems);
      },
      close() {
        this._isOpen = false;
      },
      get isOpen() {
        return this._isOpen;
      },
      isActive(el) {
        return this._elActive === el;
      },
      isSelected(val) {
        return this.value === val;
      },
      activate(el) {
        this._elActive = el;
        if (this._elActive) {
          $vui.scrollIntoView(this._elActive);
        }
      },
      get enabledOptions() {
        return _.filter(
            this.$find(":menu-item"),
            (el) => !$vui.$api(el).disabled
        );
      },
      get selectedElements() {
        return _.filter(
            this.$find(":menu-item"),
            (el) => $vui.$api(el).selected
        );
      },
      activateFirstOrSelected() {
        let els = this.selectedElements;
        if (els.length > 0) {
          this.activate(els[0]);
        } else {
          this.activateFirst();
        }
      },
      activateWithStep(step) {
        let elOptions = this.enabledOptions;
        let count = elOptions.length;
        if (!this._elActive) this._elActive = elOptions[0];
        if (count > 0) {
          let activeIndex = elOptions.indexOf(this._elActive);
          if (activeIndex === -1) activeIndex = 0;
          let index = activeIndex + step;
          if (index < 0) index = 0;
          else if (index >= count) index = count - 1;
          this.activate(elOptions[index]);
        }
      },
      activateFirst() {
        let elOptions = this.enabledOptions;
        let count = elOptions.length;
        if (count > 0) this.activate(elOptions[0]);
      },
      activateLast() {
        let elOptions = this.enabledOptions;
        let count = elOptions.length;
        if (count > 0) this.activate(elOptions[count - 1]);
      },
      select(val) {
        this.value = val;
      },
      selectActive() {
        if (this._elActive) {
          this.select($vui.$api(this._elActive).value);
        }
      },
    };
  </script>
</template>

<template
    x-component:hui="menu-button"
    @click="$api.toggle()"
    tabindex="0"
    @keydown="$api.onKeydown($event)"
>
  <slot></slot>
  <script>
    return {
      get context() {
        return this.$of(":menu");
      },
      onKeydown(e) {
        let context = this.context;
        switch (e.key) {
          case "Space":
          case "Enter":
          case "ArrowDown":
            e.preventDefault();
            context.open();
            $vui.nextTick(() => context.activateFirstOrSelected());
            break;

          case "ArrowUp":
            e.preventDefault();
            context.open();
            $vui.nextTick(() => context.activateLast());
            break;
        }
      },
      toggle() {
        let context = this.context;
        if (context.isOpen) context.close();
        else {
          context.open();
          $vui.nextTick(() => context.activateFirstOrSelected());
        }
      },
    };
  </script>
</template>

<template
    x-component:hui="menu-items"
    tabindex="0"
    x-data="{
    get isOpen(){return $api && $api.isOpen}
}"
    x-trap="isOpen"
    x-show="isOpen"
    @click.outside="$api.context.close()"
    @keydown="$api.onKeydown($event)"
    @keydown.tab.stop.prevent="$api.context.close()"
    @keydown.escape.stop.prevent="$api.context.close()"
    @keydown.enter.stop.prevent="$api.onSelectActive()"
    @keydown.space.stop.prevent="$api.onSelectActive()"
>
  <slot></slot>
  <script>
    return {
      get context() {
        return this.$of(":menu");
      },
      get isOpen() {
        return this.context.isOpen;
      },
      onSelectActive() {
        this.context.selectActive();
        this.context.close();
      },
      onKeydown(e) {
        let context = this.context;
        switch (e.key) {
          case "ArrowDown":
            e.preventDefault();
            e.stopPropagation();
            context.activateWithStep(1);
            break;

          case "ArrowUp":
            e.preventDefault();
            e.stopPropagation();
            context.activateWithStep(-1);
            break;
          case "Home":
          case "PageUp":
            e.preventDefault();
            e.stopPropagation();
            context.activateFirst();
            break;

          case "End":
          case "PageDown":
            e.preventDefault();
            e.stopPropagation();
            context.activateLast();
            break;
        }
      },
    };
  </script>
</template>

<template
    x-component:hui="menu-item"
    x-data="{
    get disabled() {return $prop('disabled')},
    get active() {return $api.active},
    get value() {return $prop('value')},
    get selected() {return $api.selected},
}"
    @mousemove="$api.activate()"
    @click="$api.onSelect()"
    :tabindex="-1"
>
  <slot></slot>
  <script>
    return {
      get context() {
        return this.$of(":menu");
      },
      get active() {
        let context = this.context;
        return context && context.isActive && context.isActive(this.$el);
      },
      get selected() {
        let context = this.context;
        return context && context.isSelected && context.isSelected(this.value);
      },
      activate() {
        this.context.activate(this.$el);
      },
      select() {
        this.context.select(this.value);
      },
      close() {
        this.context.close();
      },
      onSelect() {
        if (!this.disabled) {
          this.select();
          this.close();
        }
      },
    };
  </script>
</template>

<template x-component:page="menu-basic" x-import="hui:menu">
  <div class="flex h-full w-full justify-center bg-gray-50 p-12">
    <div class="relative inline-block text-left">
      <hui-menu>
        <span class="rounded-md shadow-sm">
          <hui-menu-button
              class="focus:shadow-outline-blue inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium leading-5 text-gray-700 transition duration-150 ease-in-out hover:text-gray-500 focus:border-blue-300 focus:outline-none active:bg-gray-50 active:text-gray-800"
          >
            <span>Options</span>
            <svg
                class="ml-2 -mr-1 h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
            >
              <path
                  fillRule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clipRule="evenodd"
              />
            </svg>
          </hui-menu-button>
        </span>

        <hui-menu-items
            class="absolute right-0 mt-2 w-56 origin-top-right divide-y divide-gray-100 rounded-md border border-gray-200 bg-white shadow-lg outline-none"
        >
          <div class="px-4 py-3">
            <p class="text-sm leading-5">Signed in as</p>
            <p class="truncate text-sm font-medium leading-5 text-gray-900">
              tom@example.com
            </p>
          </div>

          <div class="py-1">
            <app-menu-item href="#account-settings"
            >Account settings
            </app-menu-item
            >
            <app-menu-item href="#support">Support</app-menu-item>
            <app-menu-item disabled href="#new-feature"
            >New feature (soon)
            </app-menu-item
            >
            <app-menu-item href="#license">License</app-menu-item>
          </div>
          <div class="py-1">
            <app-menu-item href="#sign-out">Sign out</app-menu-item>
          </div>
        </hui-menu-items>
      </hui-menu>
    </div>
  </div>
</template>

<template x-component:app.unwrap="menu-item">
  <hui-menu-item>
    <a
        tabindex="-1"
        :href="$prop('href')"
        :class="[
        'flex justify-between w-full text-left px-4 py-2 text-sm leading-5',
        active ? 'bg-indigo-500 text-white' : 'text-gray-700',
        disabled ? 'cursor-not-allowed opacity-50' : '']"
    >
      <span :class="active ? 'font-bold' : '' ">
        <slot></slot>
      </span>
      <kbd :class="['font-sans', active ? 'text-indigo-50' : '']">âŒ˜K</kbd>
    </a>
  </hui-menu-item>
</template>
