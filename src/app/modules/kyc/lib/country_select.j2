<script src="https://cdn.jsdelivr.net/npm/tom-select/dist/js/tom-select.complete.min.js"></script>
<div>

<div
    x-data="{
      multiple: false,
      create: false,
      value: {{ field.get_data() }},
      options: {{ field.get_tom_choices_for_js() }},
      new_val: '',
      current_val: '',
      new_zip: '',
      loading_towns:false,
      cities: null,
      zip_choices: null,
      zip_value: {{ field.get_data2() }},
      loading: false,
      first_load: true,
      init() {
        this.$nextTick(() => {
          let choices = new TomSelect(this.$refs.select, {
             create: this.create,
             createOnBlur: true,
             maxOptions: null,
             maxItems: 1,
             options: this.options,
             preload: false,
             labelField: 'label',
             searchField: ['label'],
             diacritics: true,
             });

          let zip_choices = new TomSelect(this.$refs.zip_select, {
             create: this.create,
             createOnBlur: true,
             maxOptions: 1000,
             maxItems: 1,
             preload: false,
             labelField: 'label',
             searchField: ['label'],
             diacritics: true,
             placeholder: 'Entrez des caractÃ¨res de la ville ou du code postal'
             });

          zip_choices.disable();

          let refreshChoices = () => {
             let selection = [this.value];
             const controller = new AbortController();
             const timeoutId = setTimeout(() => controller.abort(), 10000)
             choices.setValue(this.value, true);
             if (this.value && this.value.length === 3 && this.new_val !== this.value) {
                this.loading = true;
                this.new_val = this.value;
                var url = `/kyc/towns/${this.new_val}`;
                console.log(url);
                fetch(url, { signal: controller.signal })
                      .then(response => response.json())
                      .then(data => {
                        this.cities = data;
                        this.loading = false;
                        console.log('fetched ' + data.length);
                      })
                      .catch(function(error) {
                        console.log(error)
                      });
            };
          };

          let displayCities = () => {
            console.log('in displayCities ' + this.current_val + ' -> ' + this.new_val);
            if (this.current_val === this.new_val) {
              zip_choices.enable();
            } else {
              console.log('new cities fetched');
              zip_choices.clear();
              zip_choices.clearOptions();
              zip_choices.addOptions(this.cities);
              zip_choices.refreshOptions(this.cities);
              zip_choices.enable();
              this.current_val = this.new_val;
            };
            if (this.first_load){
              zip_choices.setValue(this.zip_value);
              this.first_load = false;
            };
            if ({{ field.lock }}) {
              zip_choices.lock();
            } else {
              zip_choices.unlock();
            };
          };

          this.$refs.select.addEventListener('change', () => {
            this.value = choices.getValue();
            refreshChoices();
          });

          this.$watch('value', () => refreshChoices());
          this.$watch('options', () => refreshChoices());
          this.$watch('cities', () => displayCities());

          refreshChoices();
          // zip_choices.setValue(this.zip_value, false);

          if ({{ field.lock }}) {
            choices.lock();
            zip_choices.setValue(this.zip_value, false);
            zip_choices.lock();
          }else{
            choices.unlock();
            zip_choices.unlock();
          };
        })
      }
    }"
    class="col-span-12 w-full"
>

  <select
      id="{{ field.id }}"
      name="{{ field.name }}"
      {% if field.flags.required %}required{% endif %}
      x-ref="select"
  >
  </select>

<div class="min-h-10 block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm placeholder:text-gray-400 sm:text-sm sm:leading-6" >
{{ field.label2 }} <span class="font-semibold italic" x-show="loading"> Chargement en cours... </span>
<br>
<select
    x-ref="zip_select"
    id="{{field.id2}}"
    name="{{field.name2}}"
    {% if field.flags.required %}required{% endif %}
>
</select>
</div>

</div>
</div>
