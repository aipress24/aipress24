#
# SPDX-License-Identifier: AGPL-3.0-only
#

[project]
name = "aipress24-flask"
version = "2025.02.04.1"
authors = [
    {name = "Abilian SAS", email = "contact@abilian.com"},
    {name = "Techno Chroniqueurs Associ√©s", email = "erick@agencetca.info"},
]
requires-python = "<4.0,>=3.11"
dependencies = [
    "flask<4.0.0,>=3.0.0",
    # Make implicit flask deps explicit
    "click<9.0.0,>=8.1.7",
    "jinja2<4.0.0,>=3.1.3",
    "markupsafe<4.0.0,>=3.0.1",
    "pytz<2025,>=2024",
    "werkzeug<4.0.0,>=3.0.1",
    "wtforms<4.0.0,>=3.1.2",
    "blinker<2.0.0,>=1.7.0",
    # Flask extensions
    "flask-babel<5.0.0,>=4.0.0",
    "flask-classful<1.0.0,>=0.16.0",
    "flask-htmx<1.0,>=0.4",
    "flask-login<1.0.0,>=0.6.2",
    "flask-mailman<2.0.0,>=1.0.0",
    "flask-migrate<5.0.0,>=4.0.5",
    "flask-security-too<6.0.0,>=5.3.3",
    "flask-sqlalchemy<4.0.0,>=3.1.1",
    "flask-super<1.0.0,>=0.2.3",
    "flask-talisman<2.0.0,>=1.1.0",
    "flask-vite<1.0,>=0.5",
    "flask-wtf<2.0.0,>=1.2.1",
    # htmx
    "jinja2-fragments<2.0.0,>=1.2.1",
    # Config
    "python-dotenv<2.0.0,>=1.0.0",
    "dynaconf<4.0.0,>=3.2.4",
    # More Web
    "webargs<9.0.0,>=8.4.0",
    "webbits<1.0.0,>=0.1.2",
    # Generic Libs
    "arrow<2.0.0,>=1.3.0",
    "attrs<25,>=24",
    "boltons<25,>=24",
    "pipe<3.0,>=2.1",
    "python-slugify<9.0.0,>=8.0.1",
    "toml<1.0.0,>=0.10.2",
    "tomli<3.0.0,>=2.0.1",
    "loguru<1.0.0,>=0.7.2",
    "markdown<4.0.0,>=3.5.2",
    "svcs>=24.1.0",
    "aenum<4.0.0,>=3.1.15",
    "buildstr<1.0.0,>=0.1.1",
    "case-convert<2.0.0,>=1.1.0",
    "requests<3.0.0,>=2.31.0",
    "yarl<2.0.0,>=1.9.4",
    # ORM & Database
    "sqlalchemy<3.0.0,>=2.0.25",
    "sqlalchemy-utils<1.0.0,>=0.41.1",
    "advanced-alchemy>=0.23",
    "psycopg2<3.0.0,>=2.9.9",
    #
    "python-iso639<2025.0.0,>=2024.1.2",
    "gunicorn<24,>=23",
    # "hyperdx-opentelemetry<1.0,>=0.2",
    "sentry-sdk<3,>=2",
    # CLI
    "rich<14.0.0,>=13.7.0",
    "cleez<1.0.0,>=0.1.11",
    # Debug / develop (currently used in prod too)
    "devtools<1.0.0,>=0.12.2",
    "snoop<1.0,>=0.6",
    # Images
    "pillow<12,>=11",
    # Full text search
    "typesense ~= 1.0",
    "beautifulsoup4<5.0,>=4.12",
    "stripe<12,>=11",
    # Queues
    "dramatiq<2.0.0,>=1.15.0",
    "dramatiq-pg<1.0.0,>=0.11.0",
    "apscheduler<4.0.0,>=3.10.4",
    "redis<6.0.0,>=5.0.1",
    # Needed because we're scanning code w/ tests
    "pytest<9,>=8",
    "hypothesis<7.0.0,>=6.92.8",
    # Fake data generators (used currently in prod, will be removed later)
    "faker>=30",
    "mimesis>=18",
    # PDF generation
    "weasyprint<64,>=63",
    # Security / auth
    "zxcvbn<5.0.0,>=4.4.28",
    "bcrypt==4.0.1",
    "phonenumbers<9.0.0,>=8.13.27",
    "authlib<2.0.0,>=1.3.0",
    "argon2-cffi<24.0.0,>=23.1.0",
    "email-validator<3.0.0,>=2.1.1",
    "dnspython<3.0.0,>=2.6.1",
    # Screenshots and blob storage
    "boto3<2.0.0,>=1.34.16",
    # Used to install front-end (vite) will be removed later
    "nodeenv<2.0.0,>=1.8.0",
    # XML / ODF parsing
    "openpyxl<4.0.0,>=3.1.2",
    "defusedxml<1.0.0,>=0.7.1",
    "lxml<6.0.0,>=5.3.0",
    "odfdo>=3.7.10",
    "odsparsator>=1.10.0",
    "odsgenerator>=1.11.0",
    # SQLAdmin integration
    "sqladmin<1.0,>=0.20",
    "starlette<1.0,>=0.45",
    "granian[reload]<2.0,>=1.6",
    "asyncpg<1.0,>=0.30",
    "asgiref<4.0,>=3.8",
    "ijson>=3.3.0",
    "psutil>=6.1.1",
    # Extra
    "tenacity>=8.5.0",
    "setuptools>=75.8.0",
    "pyyaml>=6.0.2",
    "schedule>=1.2.2",
]
description = ""

[dependency-groups]
dev = [
    # Used to run a development server
    "honcho>=2,<3",
    # Code generation
    "buildstr<1.0.0,>=0.1.1",
    # Main QA tools
    "abilian-devtools<1.0,>=0.7",
    "flask-debugtoolbar<1.0,>=0.16",
    # (Remove?)
    #    "openpyxl<4.0.0,>=3.1.2",
    #    "pijnu==20160727",
    # More flake8 plugins
    "flake8-requirements<3.0.0,>=2.0.1",
    "flake8-use-pathlib<1.0.0,>=0.3.0",
    "flake8-ecocode",
    # Testing & automation
    "pytest-flask<2.0.0,>=1.3.0",
    "pytest-custom-exit-code<1.0.0,>=0.3.0",
    "pytest-split<1.0,>=0.10",
    "pytest-archon<1.0.0,>=0.0.6",
    "pytest-testmon<3.0.0,>=2.1.0",
    "pytest-watcher<1.0,>=0.4",
    "hypothesis<7.0.0,>=6.92.8",
    "nox<2025,>=2024",
    "invoke<3.0.0,>=2.2.0",
    # Typing extensions
    "types-bleach<7,>=6",
    "types-chardet<6,>=5",
    "types-deprecated<2,>=1",
    "types-markdown<4,>=3",
    "types-python-slugify<9,>=8",
    "types-pytz<2025,>=2024",
    "types-pyyaml<7,>=6",
    "types-redis<5,>=4",
    "types-requests<3,>=2",
    "types-setuptools<76,>=75",
    "types-toml<1.0,>=0.10",
    # More linters / typecheckers / tools
    "import-linter<3.0,>=2.0",
    "typeguard<5.0,>=4.1",
    "pip-licenses<6,>=5",
    "pyupgrade<4.0.0,>=3.15.0",
    "tomlkit<1.0,>=0.13",
    "deptry>=0.20",
    "coverage[toml]<8.0.0,>=7.4.0",
    "infer-types<2.0.0,>=1.0.0",
    "flynt<2.0.0,>=1.0.1",
    "sqlalchemy-data-model-visualizer<1.0.0,>=0.1.3",
    # e2e and cucumber tests
    "playwright",
    "pytest-playwright",
    "selenium",
    "behave",
    "cssselect",
    "splinter<1.0.0,>=0.21.0",
]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"


[tool.pdm.build]
includes = ["src/app", "src/adminapp", "src/server"]
excludes = ["**/test_*.py", "**/*_test.py", "**/tests.py"]


# -----------------------------------------------------------------------------

[tool.pytest]
python_files = "test_*.py *_test.py tests.py"

[tool.pytest.ini_options]
addopts = "--disable-warnings --disable-pytest-warnings --ignore=src/app/sandbox/ --tb=short --doctest-modules"
filterwarnings = [
    'ignore:.*contextfunction.*:DeprecationWarning',
    'ignore:.*Unmanaged.*:sqlalchemy.exc.SAWarning',
]
testpaths = ["tests", "src"]

# -----------------------------------------------------------------------------

[tool.pyanalyze]
paths = ["src/"]
import_paths = ["."]


# -----------------------------------------------------------------------------

[tool.deptry.per_rule_ignores]
# X defined as a dependency but not used in the codebase
DEP002 = [
    # Used (implicitely) by Flask-Login (I think)
    'zxcvbn',
    'bcrypt',
    'argon2-cffi',
    # Used (implicitely) by Flask (I think)
    'python-dotenv',
    # Used (implicitely) by SQLA
    'psycopg2',
    "asyncpg",
    #
    'python-iso639',
    # Web server
    'gunicorn',
    'honcho',
    # Used by dramatic (?)
    'redis',
    # Used as a script
    'shot-scraper',
    # Used during install
    'nodeenv',
    # ???
    'case-convert',
    'defusedxml',
    # Not used (yet?)
    'phonenumbers',
    'jinja2-fragments',
    'pluggy',
    # Can be removed (I think)
    'dramatiq-pg',
    # Used by the WTForms
    'email-validator',
    'dnspython',
    # Used by a script
    'buildstr',
    # Used by hyperdx
    #    'hyperdx-opentelemetry',
    # Used in production
    'sentry-sdk',
    # Used by odsparsator
    'odfdo',
    # Used vi 'flask packages'
    'setuptools',
]
# X imported but declared as a dev dependency
DEP004 = ['hypothesis', 'openpyxl', "flask_debugtoolbar"]

# -----------------------------------------------------------------------------

[tool.pyright]
exclude = [
    '.nox',
    'tests',
    'sandbox',
    'doc',
    'scripts',
    'tmp',
    "src/app/modules/superadmin",
]
include = ["src"]

# False positives
reportPrivateImportUsage = false
reportFunctionMemberAccess = false

# Enable later
reportGeneralTypeIssues = false
reportIncompatibleMethodOverride = false
reportIncompatibleVariableOverride = false

# -----------------------------------------------------------------------------

[tool.vulture]
ignore_decorators = ["@blueprint.before_request", "@expose"]

exclude = ["src/app/models/geo.py"]
#ignore_names = ["visit_*", "do_*"]
#make_whitelist = true
#min_confidence = 80
#paths = ["myscript.py", "mydir"]
#sort_by_size = true
#verbose = true

# -----------------------------------------------------------------------------

[tool.bandit]
skips = [
    "B404", # blacklist
    "B603", # subprocess_without_shell_equals_true
    "B101", # assert_used
    # FIXME later
    "B311", # blacklist
]

exclude_dirs = [
    "tests",
    "src/app/flask/cli/bootstrap.py",
    "src/app/faker",
    "conftest.py",
]

# -----------------------------------------------------------------------------

[tool.coverage.run]
omit = ["tests/*.py", "**/test*.py", "**/*test.py"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    'pragma: no cover',
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:",
    "raise AssertionError",
    "raise NotImplementedError",
]
